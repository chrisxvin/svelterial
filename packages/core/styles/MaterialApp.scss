@use 'sass:map';
@use 'svelterial/settings' as settings;

// variables:start
$mode: 'global' !default;
$fontSize: 16px !default;
$lineHeight: 1.5 !default;
$bodyFontFamily: 'Roboto', 'Segoe UI', sans-serif !default;
$headingFontFamily: $bodyFontFamily !default;
$headings: () !default;

@import 'svelterial/MaterialApp';

$headings: map.deep-merge(
  (
    'h1': (
      'size': 6rem,
      'weight': 300,
      'line-height': 6rem,
      'letter-spacing': -0.015625em,
    ),
    'h2': (
      'size': 3.75rem,
      'weight': 300,
      'line-height': 3.75rem,
      'letter-spacing': -0.0083333333em,
    ),
    'h3': (
      'size': 3rem,
      'weight': 400,
      'line-height': 3.125rem,
      'letter-spacing': normal,
    ),
    'h4': (
      'size': 2.125rem,
      'weight': 400,
      'line-height': 2.5rem,
      'letter-spacing': 0.0073529412em,
    ),
    'h5': (
      'size': 1.5rem,
      'weight': 400,
      'line-height': 2rem,
      'letter-spacing': normal,
    ),
    'h6': (
      'size': 1.25rem,
      'weight': 500,
      'line-height': 2rem,
      'letter-spacing': 0.0125em,
    ),
  ),
  $headings
);

$themes: (
  light: (
    primary: (
      base: #6200ea,
      text: #ffffff,
    ),
    secondary: (
      base: #03dac6,
      text: #000000,
    ),
    body: (
      elevated: #f5f5f5,
      bg: #ffffff,
      dimmed: #ffffff,
    ),
    text: (
      primary: rgba(0, 0, 0, 0.87),
      secondary: rgba(0, 0, 0, 0.54),
      disabled: rgba(0, 0, 0, 0.38),
    ),
    disabled: hsla(0, 0%, 0%, 0.26),
    contrast: '0, 0%, 0%',
    contrastOffset: 0.04,
  ),
);

// variables:end
@function flatten($map, $prefix: '') {
  $output: ();
  @each $name, $value in $map {
    @if type-of($value) == 'map' {
      $output: map-merge($output, flatten($value, '#{$prefix}#{$name}-'));
    } @else {
      $output: map-merge(
        $output,
        (
          '#{$prefix}#{$name}': $value,
        )
      );
    }
  }
  @return $output;
}

@each $themeName, $theme in $themes {
  .theme--#{$themeName} {
    @each $key, $value in flatten($theme) {
      --s-#{$key}: #{$value};
    }
  }
}

body,
html {
  height: 100%;
}

.s-app {
  height: 100%;
  line-height: $lineHeight;
  background-color: var(--s-body-bg);
  color: var(--s-text-primary);
  font-size: $fontSize;
  font-family: $bodyFontFamily;
}

@each $color in ('primary', 'secondary') {
  .s-#{$color} {
    background-color: var(--s-#{$color}-base) !important;
    color: var(--s-#{$color}-text) !important;
  }

  .s-#{$color}-text {
    color: var(--s-#{$color}-base) !important;
  }
}

.s-ripple-container {
  position: relative;
  overflow: hidden;
}

.s-ripple {
  position: absolute;
  color: inherit;
  border-radius: 50%;
  pointer-events: none;
  width: 100px;
  height: 100px;
  margin-top: -50px;
  margin-left: -50px;
  transform: scale(0) translate(0, 0);
}

@mixin elementStyles {
  p {
    margin-bottom: 2px * 4;
  }

  a {
    text-decoration: none;
    color: var(--s-secondary-base);
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: $headingFontFamily;
    margin: 0;
  }

  @each $heading, $map in $headings {
    #{$heading} {
      font-size: map-get($map, 'size');
      font-weight: map-get($map, 'weight');
      line-height: map-get($map, 'line-height');
      letter-spacing: map-get($map, 'letter-spacing');
    }
  }
}

@if $mode == 'global' {
  @include elementStyles;
}

 @else if $mode == 'scoped' {
  .s-app {
    @include elementStyles;
  }
}
